# Guide de D√©ploiement sur une Instance AWS EC2

## 1Ô∏è‚É£ Connexion √† l'Instance EC2

Avant de commencer, connecte-toi √† ton instance EC2 en utilisant SSH :

```bash
ssh -i "chemin-vers-ta-cle.pem" ubuntu@ton-ip-ec2
```

üìå **Remplace** `chemin-vers-ta-cle.pem` par le chemin de ta cl√© priv√©e et `ton-ip-ec2` par l'adresse IP publique de ton instance.

---

## 2Ô∏è‚É£ Installation des D√©pendances sur l‚ÄôInstance

Avant d'ex√©cuter le projet, installe les outils n√©cessaires :

```bash
# Mise √† jour des paquets
sudo apt update && sudo apt upgrade -y

# Installation de Node.js et npm
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

# V√©rifier l'installation
node -v
npm -v

# Installer Docker
sudo apt install -y docker.io
sudo systemctl start docker
sudo systemctl enable docker
```

---

## 3Ô∏è‚É£ Cloner le Projet depuis GitHub

T√©l√©charge le projet sur l‚Äôinstance EC2 avec :

```bash
git clone https://github.com/SOG-collab/Mon_projet_aws.git
cd Mon_projet_aws
```

---

## 4Ô∏è‚É£ Installer les D√©pendances du Projet

Va dans chaque dossier (`backend` et `frontend`) et installe les d√©pendances :

```bash
# Installer les d√©pendances du backend
cd backend
npm install

# Installer les d√©pendances du frontend
cd ../frontend
npm install
```

---

## 5Ô∏è‚É£ Lancer le Projet avec Docker

Puisque tout est conteneuris√©, lance simplement Docker Compose :

```bash
cd ../
docker compose up -d --build
```

‚úÖ **Cela va :**

- Construire les images Docker pour le frontend, le backend et la base de donn√©es
- Lancer tous les services en arri√®re-plan

---

## 6Ô∏è‚É£ V√©rifications Apr√®s le Lancement

### ‚û°Ô∏è V√©rifier les logs des services

```bash
docker compose logs backend
docker compose logs frontend
```

### ‚û°Ô∏è V√©rifier les conteneurs actifs

```bash
docker ps
```

### ‚û°Ô∏è Tester l‚Äôacc√®s √† l‚Äôapplication

- **Backend :** `http://ton-ip-ec2:5000`
- **Frontend :** `http://ton-ip-ec2:3000`

‚ö†Ô∏è **Si l‚Äôacc√®s ne fonctionne pas, v√©rifie que les ports sont ouverts dans le Security Group de ton instance EC2.** Ajoute une r√®gle pour autoriser **les ports 3000 et 5000**.

---

## 7Ô∏è‚É£ Automatiser le D√©ploiement (Optionnel)

Si tu veux automatiser l'installation et le lancement, cr√©e un script `deploy.sh` :

```bash
#!/bin/bash

# Mise √† jour des paquets
sudo apt update && sudo apt upgrade -y

# Installation de Node.js et Docker
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs docker.io
sudo systemctl start docker
sudo systemctl enable docker

# Clonage du projet
cd /home/ubuntu
git clone https://github.com/SOG-collab/Mon_projet_aws.git
cd Mon_projet_aws

# Installation des d√©pendances
cd backend && npm install
cd ../frontend && npm install

# Lancer le projet
cd ../
docker compose up -d --build
```

Puis ex√©cute-le avec :

```bash
chmod +x deploy.sh
./deploy.sh
```

---

## üéØ Conclusion

‚úÖ **Ton projet est maintenant d√©ploy√© sur EC2 !** üí° **Gr√¢ce √† Docker, tout est automatis√© et fonctionne de mani√®re isol√©e.** üöÄ

Si besoin, on peut ajouter un CI/CD pour automatiser le d√©ploiement apr√®s chaque commit ! üòÉ

